AWSTemplateFormatVersion: 2010-09-09
Transform: 'AWS::Serverless-2016-10-31'
Description: >-
  An AWS Lambda application to operate the Lattice Suregery Error Correcting Compiler.
Parameters:
  EcrRepositoryName:
    Type: 'String'
  AccountId: # Working around the fact that the implicit parameter AWS::AccountId seems to be broken 
    Type: 'String'
Resources:
  CompilerLambda:
    Type: 'AWS::Serverless::Function'
    Properties:
      PackageType: Image
      ImageUri: !Sub '${AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${EcrRepositoryName}:latest'
      Description: Lattice Surgery Compiler Lambda
      Timeout: 20
      MemorySize: 256
      Policies:
        - AWSLambdaBasicExecutionRole
        - AWSLambda_ReadOnlyAccess
        - AWSXrayWriteOnlyAccess
      Tracing: Active    
  CompilerApi:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Name: Compiler API
      Description: API used to compile quantum circuits
      FailOnWarnings: true
  LambdaPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:invokeFunction'
      FunctionName: !GetAtt 
        - CompilerLambda
        - Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Join 
        - ''
        - - 'arn:aws:execute-api:'
          - !Ref 'AWS::Region'
          - ':'
          - !Ref 'AccountId'
          - ':'
          - !Ref CompilerApi
          - /*
  CompilerApiStage:
    DependsOn:
      - ApiGatewayAccount
    Type: 'AWS::ApiGateway::Stage'
    Properties:
      DeploymentId: !Ref ApiDeployment
      MethodSettings:
        - DataTraceEnabled: true
          HttpMethod: '*'
          LoggingLevel: INFO
          ResourcePath: /*
      RestApiId: !Ref CompilerApi
      StageName: LATEST
  ApiGatewayCloudWatchLogsRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: ApiGatewayLogsPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:DescribeLogGroups'
                  - 'logs:DescribeLogStreams'
                  - 'logs:PutLogEvents'
                  - 'logs:GetLogEvents'
                  - 'logs:FilterLogEvents'
                Resource: '*'
  ApiGatewayAccount:
    Type: 'AWS::ApiGateway::Account'
    Properties:
      CloudWatchRoleArn: !GetAtt 
        - ApiGatewayCloudWatchLogsRole
        - Arn
  ApiDeployment:
    Type: 'AWS::ApiGateway::Deployment'
    DependsOn:
      - CompilerRequest
    Properties:
      RestApiId: !Ref CompilerApi
      StageName: DummyStage
  CompilerResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref CompilerApi
      ParentId: !GetAtt 
        - CompilerApi
        - RootResourceId
      PathPart: compile
  CompilerRequest:
    DependsOn: LambdaPermission
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: NONE
      HttpMethod: POST
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri: !Join 
          - ''
          - - 'arn:aws:apigateway:'
            - !Ref 'AWS::Region'
            - ':lambda:path/2015-03-31/functions/'
            - !GetAtt 
              - CompilerLambda
              - Arn
            - /invocations
        IntegrationResponses:
          - StatusCode: 200
      ResourceId: !Ref CompilerResource
      RestApiId: !Ref CompilerApi
      MethodResponses:
        - StatusCode: 200
